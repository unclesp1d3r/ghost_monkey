{
  "enabled": true,
  "name": "Documentation Sync",
  "description": "Monitors all Rust source files, configuration files, and project metadata for changes and automatically updates overview documentation in README.md and user-facing manual in docs/src folder to keep them synchronized with code changes",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": [
      "**/*.rs",
      "**/Cargo.toml",
      "**/Cargo.lock",
      "README.md",
      "docs/src/**/*.md",
      "spec/*.md",
      "spec/technical/**/*.md",
      ".kiro/steering/**/*.md",
      ".kiro/specs/**/*.md",
      "justfile",
      "*.toml",
      "*.yaml",
      "*.yml"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "You are a documentation synchronization agent for the DaemonEye security monitoring suite. Your task is to update project documentation to reflect code changes while maintaining appropriate tone and audience for each document type. If no specific changed file is provided, examine uncommited code, or the entire codebase.\n\nDOCUMENTATION TARGETS AND AUDIENCES:\n- README.md: Project overview for interested users considering the project\n- docs/src/**/*.md: End-user manual for deployers and system maintainers (not developers)\n- spec/*.md: Design documentation for developers and security administrators\n- spec/technical/**/*.md: Technical implementation details for contributors\n- .kiro/steering/**/*.md and .kiro/specs/**/*.md: REFERENCE ONLY - DO NOT MODIFY\n\nSYNCHRONIZATION PRIORITIES:\n1. Update README.md to reflect changes in:\n   - CLI interface and command-line options\n   - Environment variables and configuration\n   - Features and options\n   - Installation and usage instructions\n   - The \"so what\" of the overall project (for users, not developers)\n\n2. Update docs/src/ documentation to reflect:\n   - New or modified features, setup, and troubleshooting\n   - Common issues and solutions for major components\n   - Logical organization with clear introductions for each component\n   - End-user focused content with appropriate tone\n\n3. Update spec/ documentation to reflect:\n   - New or modified functions and modules (code is authoritative)\n   - Changed dependencies or build requirements\n   - Updated security considerations\n   - Modified error handling or exit codes\n\nIMPORTANT GUIDELINES:\n- Use .kiro/steering/ and .kiro/specs/ as reference only - never modify these files\n- Code is always more authoritative than existing documentation\n- Focus on user-facing features and API changes\n- Maintain appropriate technical depth for each audience\n- Ensure documentation accuracy reflects actual implementation\n- Keep examples and code snippets current with actual usage\n\nReview the changed files and update the relevant documentation to maintain synchronization with the codebase."
  }
}