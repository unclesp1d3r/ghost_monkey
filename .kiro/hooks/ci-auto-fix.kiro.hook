{
  "enabled": true,
  "name": "CI Auto-Fix",
  "description": "Automatically runs CI checks when source files change and fixes any failures including formatting, linting, compilation errors, test failures, security audits, and license compliance issues",
  "version": "1",
  "when": {
    "type": "userTriggered",
    "patterns": [
      "**/*.rs",
      "**/Cargo.toml",
      "**/Cargo.lock",
      "justfile",
      "deny.toml",
      "rust-toolchain.toml"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "1. First, run `just ci-check` to identify any failures\n2. Analyze the output to understand what specific checks are failing. If everything passes, you're done.\n3. Make minimal, targeted fixes to address ONLY the failing checks:\n- For formatting issues: run `just format`\n- For linting issues (clippy): fix the specific violations reported (rerun with `just lint-rust` / `just lint-rust-min`)\n- For compilation/type errors: fix the underlying Rust code until `just check` (or `cargo check`) succeeds\n- For test failures: fix the failing tests or underlying code (verify with `just test` or `just test-ci`)\n- For dependency security/advisory issues: run `just audit` (cargo-audit) and/or update `Cargo.toml` then `cargo update`\n- For license/compliance issues: run `just deny` and address cargo-deny findings\n4. After making fixes, run `just ci-check` again to verify all checks pass\n5. If any checks still fail, repeat steps 2-4 until all checks pass\n6. Provide a summary of what was fixed and confirm that `just ci-check` now passes completely\nKeep changes minimal and focused - only fix what's actually causing the CI failures. Do not make unnecessary refactoring or style changes beyond what's required to pass the checks."
  }
}