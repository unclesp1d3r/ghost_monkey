{
  "enabled": true,
  "name": "Rust Security Hardening",
  "description": "Monitor all source code changes for Rust or protobuf files and analyze ONLY changed files (diff scope) for security posture. Apply clearly safe hardening improvements while preserving all public APIs across 10 security categories including privilege separation, input validation, cryptography, and error handling.",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/*.rs",
      "**/*.proto",
      "**/Cargo.toml",
      "**/Cargo.lock"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "# Security Analysis & Hardening for Changed Files\n\nAnalyze ONLY the changed files in the current diff for security issues and apply safe hardening improvements.\n\n## EXECUTION STEPS\n1. **Identify Changed Files**: List all modified .rs, .proto, Cargo.toml files in current diff\n2. **Security Scan**: Analyze each changed file against the 10 security categories below\n3. **Apply Safe Edits**: Make only mechanical, non-breaking security improvements\n4. **Validate**: Run `just lint && just test` to ensure changes don't break anything\n5. **Report**: Provide summary of applied changes and deferred items\n\n## SECURITY CATEGORIES TO CHECK\n\n### 1. Privilege Separation\n- ❌ No `unsafe` blocks added\n- ❌ No privilege escalation patterns\n- ✅ Add `#[deny(unsafe_code)]` if missing from modules\n\n### 2. Input Validation\n- ✅ Add bounds checks for array/vector access\n- ✅ Validate numeric ranges before use\n- ✅ Canonicalize file paths with `std::fs::canonicalize`\n- ✅ Replace `.unwrap()` with proper error handling\n\n### 3. Data Handling\n- ✅ Remove any hardcoded secrets or sensitive data\n- ✅ Ensure paths are canonicalized and bounded to data directories\n- ❌ Flag any binary blob handling for review\n\n### 4. Cryptography\n- ✅ Note any weak hash algorithms (MD5, SHA1) for upgrade\n- ✅ Ensure BLAKE3 usage where appropriate\n- ❌ Flag any custom crypto implementations\n\n### 5. Error Handling & Logging\n- ✅ Replace `println!`/`eprintln!` with `tracing::{info,warn,error}!`\n- ✅ Add `tracing::instrument` to sensitive functions\n- ✅ Ensure error messages don't leak sensitive paths\n- ✅ Add context to error chains with `.with_context()`\n\n### 6. Resource Management\n- ✅ Add size limits to unbounded collections\n- ✅ Add timeout documentation to async operations\n- ✅ Remove dead code that expands attack surface\n\n### 7. Dependencies\n- ✅ Remove unused dependencies from Cargo.toml\n- ✅ Disable unnecessary features\n- ❌ Flag any new dependencies for review\n\n### 8. Concurrency & IPC\n- ✅ Document timeout behavior in IPC operations\n- ✅ Add bounds to channel capacities\n- ❌ Flag any new async/threading patterns\n\n### 9. Security Regression Risks\n- ✅ Mark TODO items with `SECURITY_TODO:` prefix\n- ✅ Document unimplemented security features\n- ❌ Flag any security-critical stubs\n\n### 10. Build Hygiene\n- ✅ Ensure `#![deny(warnings)]` compliance\n- ✅ Add missing documentation for public APIs\n- ✅ Verify clippy compliance\n\n## SAFE EDITS TO APPLY AUTOMATICALLY\n\n```rust\n// ✅ Replace console output\nprintln!(\"Starting process\"); \n// becomes:\ntracing::info!(\"Starting process\");\n\n// ✅ Add instrumentation\nfn sensitive_operation() {\n// becomes:\n#[tracing::instrument]\nfn sensitive_operation() {\n\n// ✅ Add bounds checking\nlet item = vec[index];\n// becomes:\nlet item = vec.get(index).ok_or(\"Index out of bounds\")?;\n\n// ✅ Canonicalize paths\nlet path = PathBuf::from(user_input);\n// becomes:\nlet path = std::fs::canonicalize(PathBuf::from(user_input))\n    .with_context(|| \"Invalid path provided\")?;\n\n// ✅ Add error context\n.map_err(|e| anyhow!(\"Failed to parse config: {}\", e))\n// becomes:\n.with_context(|| \"Failed to parse configuration file\")\n```\n\n## CONSTRAINTS\n- **Scope**: Only modify files that appear in the current diff\n- **Safety**: All changes must pass `just lint && just test`\n- **API Stability**: No changes to public function signatures\n- **Performance**: Avoid changes that add significant overhead\n- **Behavior**: Preserve all existing functionality\n\n## OUTPUT FORMAT\n\n```\n## Security Analysis Summary\n**Files Analyzed**: [list of changed files]\n**Safe Edits Applied**: [count]\n**Items Deferred**: [count]\n**Approval Required**: [count]\n\n### Applied Changes\n- [file]: [description of change]\n- [file]: [description of change]\n\n### Deferred Items\n- [file]: [reason for deferral]\n\n### Requires Approval\n- [file]: [security concern requiring human review]\n\n### Risk Assessment\n[Overall security posture assessment]\n\n### Next Steps\n[Recommended follow-up actions]\n```\n\n## VALIDATION COMMANDS\n```bash\njust lint    # Must pass with zero warnings\njust test    # All tests must pass\n```\n\nIf any validation fails, revert the problematic changes and note in the deferred section."
  }
}